#!/bin/bash
set -Euox pipefail

COMPONENT="compliance"
BIN=oc
LOGS_DIR=${LOGS_DIR:-must-gather-logs}

# Get API resources
APIRESOURCES=$(${BIN} get crds -o jsonpath="{.items[*].metadata.name}" | tr ' ' '\n' | grep ${COMPONENT})

for APIRESOURCE in ${APIRESOURCES[@]}
do
  NAMESPACES=$(${BIN} get ${APIRESOURCE} --all-namespaces=true -o jsonpath='{range .items[*]}{@.metadata.namespace}{"\n"}{end}' | uniq)
  for NAMESPACE in ${NAMESPACES[@]}
  do
    mkdir -p ${LOGS_DIR}/${NAMESPACE}/${APIRESOURCE}
    ${BIN} describe ${APIRESOURCE} -n ${NAMESPACE} > ${LOGS_DIR}/${NAMESPACE}/${APIRESOURCE}/describe.log
    ${BIN} get ${APIRESOURCE} -n ${NAMESPACE} -o=yaml > ${LOGS_DIR}/${NAMESPACE}/${APIRESOURCE}/get.yaml
  done
done

NAMESPACE="openshift-compliance"
SCANS=$(${BIN} get scans -n ${NAMESPACE} -o jsonpath="{.items[*].metadata.name}")
RAW_RESULTS_DIR=${LOGS_DIR}/${NAMESPACE}/raw-results/
EXTRACT_PODS_DIR=${RAW_RESULTS_DIR}/extract-pods/
mkdir -p ${EXTRACT_PODS_DIR}
for SCAN in ${SCANS[@]}
do
    mkdir ${RAW_RESULTS_DIR}/${SCAN}
    CLAIMNAME=$(${BIN} get pvc -n ${NAMESPACE} ${SCAN} -ojsonpath='{.metadata.name}')
    # The EXTRACT_POD_NAME needs to match the pod name in fetch-raw-results-pod-template.yaml
    EXTRACT_POD_NAME="extract-raw-results-${CLAIMNAME}"
    sed s/%CLAIMNAME%/${CLAIMNAME}/g /usr/share/fetch-raw-results-pod-template.yaml > ${EXTRACT_PODS_DIR}/${EXTRACT_POD_NAME}-pod.yaml

    ${BIN} create -n ${NAMESPACE} -f ${EXTRACT_PODS_DIR}/${EXTRACT_POD_NAME}-pod.yaml
    ${BIN} wait -n ${NAMESPACE} --for=condition=Ready pod/${EXTRACT_POD_NAME}
    ${BIN} cp -n ${NAMESPACE} ${EXTRACT_POD_NAME}:/scan-results ${RAW_RESULTS_DIR}/${SCAN}
    ${BIN} delete pod -n ${NAMESPACE} ${EXTRACT_POD_NAME}
done

# Pod logs, describes
NAMESPACES=(openshift-compliance)
APIRESOURCES=(configmaps pods routes roles rolebindings serviceaccounts services leases)

for NAMESPACE in ${NAMESPACES[@]}
do
  PODS=$(${BIN} get pods -n ${NAMESPACE} -o jsonpath="{.items[*].metadata.name}")
  mkdir -p ${LOGS_DIR}/${NAMESPACE}/pods
  for POD in ${PODS[@]}
  do
    ${BIN} logs --all-containers=true -n ${NAMESPACE} ${POD} > ${LOGS_DIR}/${NAMESPACE}/pods/${POD}.log
  done

  for APIRESOURCE in ${APIRESOURCES[@]}
  do
    mkdir -p ${LOGS_DIR}/${NAMESPACE}/${APIRESOURCE}
    ${BIN} describe ${APIRESOURCE} -n ${NAMESPACE} > ${LOGS_DIR}/${NAMESPACE}/${APIRESOURCE}/describe.log
    ${BIN} get ${APIRESOURCE} -n ${NAMESPACE} -o=yaml > ${LOGS_DIR}/${NAMESPACE}/${APIRESOURCE}/get.yaml
  done
done


# Clusterroles and clusterrolebindings
KEY="compliance"
NAMESPACE="openshift-compliance"
APIRESOURCES=(clusterroles clusterrolebindings)

for APIRESOURCE in ${APIRESOURCES[@]}
do
  NAMES=$(${BIN} get ${APIRESOURCE} -o jsonpath="{.items[*].metadata.name}" | tr ' ' '\n' | grep ${KEY})
  for NAME in ${NAMES[@]}
  do
    mkdir -p ${LOGS_DIR}/${NAMESPACE}/${APIRESOURCE}
    ${BIN} describe ${APIRESOURCE} ${NAME} > ${LOGS_DIR}/${NAMESPACE}/${APIRESOURCE}/${NAME}-describe.log
    ${BIN} get ${APIRESOURCE} ${NAME} -o=yaml > ${LOGS_DIR}/${NAMESPACE}/${APIRESOURCE}/${NAME}.yaml
  done
done


# Operator pods
PODS=$(${BIN} get pods -n ${NAMESPACE} -o jsonpath="{.items[*].metadata.name}" | tr ' ' '\n' | grep ${KEY})
mkdir -p ${LOGS_DIR}/${NAMESPACE}/pods
for POD in ${PODS[@]}
do
  ${BIN} logs --all-containers=true -n ${NAMESPACE} ${POD} > ${LOGS_DIR}/${NAMESPACE}/pods/${POD}.log
  ${BIN} describe pods ${POD} -n ${NAMESPACE} > ${LOGS_DIR}/${NAMESPACE}/pods/${POD}-describe.log
  ${BIN} get pods ${POD} -n ${NAMESPACE} -o=yaml > ${LOGS_DIR}/${NAMESPACE}/pods/${POD}.yaml
done
