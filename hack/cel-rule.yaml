apiVersion: compliance.openshift.io/v1alpha1
debug: true
kind: ScanSetting
maxRetryOnTimeout: 3
metadata:
  name: default-cel
  namespace: openshift-compliance
rawResultStorage:
  disabled: true
  nodeSelector:
    node-role.kubernetes.io/master: ""
  pvAccessModes:
    - ReadWriteOnce
  rotation: 3
  size: 1Gi
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
roles:
  - master
  - worker
scanTolerations:
  - operator: Exists
schedule: 0 1 * * *
showNotApplicable: false
strictNodeScan: true
suspend: false
timeout: 30m
---
checkType: Platform
instructions: |-
  Verify that the every non-control plane namespace has an appropriate
  NetworkPolicy.

  To get all the non-control plane namespaces, you can do the
  following command $ oc get  namespaces -o json | jq '[.items[] | select((.metadata.name | startswith("openshift") | not) and (.metadata.name | startswith("kube-") | not) and .metadata.name != "default" and (true)) | .metadata.name ]'

  To get all the non-control plane namespaces with a NetworkPolicy, you can do the
  following command $ oc get --all-namespaces networkpolicies -o json | jq '[.items[] | select((.metadata.namespace | startswith("openshift") | not) and (.metadata.namespace | startswith("kube-") | not) and .metadata.namespace != "default" and (true)) | .metadata.namespace] | unique'

  Namespaces matching the variable ocp4-var-network-policies-namespaces-exempt-regex regex are excluded from this check.

  Make sure that the namespaces displayed in the commands of the commands match.
  Is it the case that Namespaced Network Policies needs review?
metadata:
  name: ocp4-configure-network-policies-namespaces-cel
  namespace: openshift-compliance
kind: Rule
rationale: "Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. When a network policy is introduced to a given namespace, all traffic not allowed by the policy is denied. However, if there are no network policies in a namespace all traffic will be allowed into and out of the pods in that namespace."
title: Ensure that application Namespaces have Network Policies defined.
scannerType: cel
id: xccdf_org.ssgproject.content_rule_configure_network_policies_namespaces
description: Use network policies to isolate traffic in your cluster network.
severity: high
apiVersion: compliance.openshift.io/v1alpha1
expression: >
  size(nl.items) == 0 ||
  size(
    nl.items
    .filter(ns, !ns.metadata.name.matches(e.value))
    .filter(ns, npl.items.exists(np, np.metadata.namespace == ns.metadata.name))
  ) == size(nl.items.filter(ns, !ns.metadata.name.matches(e.value)))
inputs:
  - name: nl
    type: KubeGroupVersionResource
    apiGroup: ""
    version: v1
    resource: namespaces
  - name: npl
    type: KubeGroupVersionResource
    apiGroup: networking.k8s.io
    version: v1
    resource: networkpolicies
  - name: e
    type: KubeGroupVersionResource
    apiGroup: compliance.openshift.io
    version: v1alpha1
    resource: variables/ocp4-var-network-policies-namespaces-exempt-regex
    namespace: openshift-compliance
errorMessage: "Application Namespaces do not have Network Policies defined."
---
checkType: Platform
instructions: |-
  Run the following command:
  oc get -nopenshift-etcd cm etcd-pod -oyaml | grep -E "\-\-cert-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-[a-z]+/etcd-serving-NODE_NAME.crt"
  Verify that there is a certificate configured.
  Is it the case that the etcd client certificate is not configure
metadata:
  name: ocp4-etcd-cert-file-cel
  namespace: openshift-compliance
kind: Rule
rationale:
  Without cryptographic integrity protections, information can be altered
  by unauthorized users without detection.
title: Ensure the etcd client certificate is set
scannerType: cel
id: xccdf_org.ssgproject.content_rule_etcd_cert_file
description: |-
  To ensure the etcd service is serving TLS to clients, make sure the etcd-pod* ConfigMaps in the openshift-etcd namespace contain the following argument for the etcd binary in the etcd pod:

  --cert-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-[a-z]+/etcd-serving-NODE_NAME.crt

  . Note that the

  [a-z]+

  is being used since the directory might change between OpenShift versions.
severity: medium
apiVersion: compliance.openshift.io/v1alpha1
expression: cm.data["pod.yaml"].parseYAML().spec.containers.exists(c, c.command.exists(x, x.matches(r'--cert-file=/.*\.crt') ))
# The expression above checks the following resource "oc get -nopenshift-etcd cm etcd-pod -oyaml"
inputs:
  - name: cm
    namespace: openshift-etcd
    type: KubeGroupVersionResource
    apiGroup: ""
    version: v1
    resource: configmaps/etcd-pod
errorMessage: There is no pod with executing a command '--cert-file='
---
apiVersion: compliance.openshift.io/v1alpha1
kind: TailoredProfile
metadata:
  name: cel-scanner-tp
  namespace: openshift-compliance
  annotations:
    compliance.openshift.io/scanner-type: cel
    compliance.openshift.io/custom-profile: "true"
spec:
  description: Test
  enableRules:
    - name: ocp4-configure-network-policies-namespaces-cel
      rationale: test
    - name: ocp4-etcd-cert-file-cel
      rationale: test
  title: My modified nist profile with a custom value
---
apiVersion: compliance.openshift.io/v1alpha1
kind: ScanSettingBinding
metadata:
  name: cel-ssb
  namespace: openshift-compliance
profiles:
  - apiGroup: compliance.openshift.io/v1alpha1
    kind: TailoredProfile
    name: cel-scanner-tp
settingsRef:
  apiGroup: compliance.openshift.io/v1alpha1
  kind: ScanSetting
  name: default-cel
